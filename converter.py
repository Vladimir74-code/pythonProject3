import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
questions = [
    {
        "question": "–ö–∞–∫–æ–π —É –≤–∞—Å —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏?",
        "options": [
            "–ê–∫—Ç–∏–≤–Ω—ã–π –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π",
            "–°–ø–æ–∫–æ–π–Ω—ã–π –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–π",
            "–ü—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫–∏–π –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π"
        ],
        "weights": [2, 1, 3]
    },
    {
        "question": "–ì–¥–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∂–∏—Ç—å?",
        "options": [
            "–í –≥–æ—Ä–æ–¥–µ",
            "–ù–∞ –ø—Ä–∏—Ä–æ–¥–µ",
            "–£ –º–æ—Ä—è"
        ],
        "weights": [1, 3, 2]
    },
    {
        "question": "–ö–∞–∫–∞—è —É –≤–∞—Å –ª—é–±–∏–º–∞—è –µ–¥–∞?",
        "options": [
            "–ú—è—Å–æ",
            "–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã",
            "–î–µ—Å–µ—Ä—Ç—ã"
        ],
        "weights": [3, 2, 1]
    },
    {
        "question": "–ö–∞–∫–æ–π –≤–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º?",
        "options": [
            "–ù–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –¥–µ–π—Å—Ç–≤—É—é",
            "–ü—Ä–æ–±—É—é —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
            "–û–±–¥—É–º—ã–≤–∞—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–æ–ª–≥–æ"
        ],
        "weights": [3, 2, 1]
    },
    {
        "question": "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –æ–±—â–µ–Ω–∏—é —Å –ª—é–¥—å–º–∏?",
        "options": [
            "–û–±–æ–∂–∞—é –æ–±—â–∞—Ç—å—Å—è",
            "–ù—Ä–∞–≤–∏—Ç—Å—è, –Ω–æ –±—ã–≤–∞–µ—Ç —É—Ç–æ–º–∏—Ç–µ–ª—å–Ω–æ",
            "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –æ–±—â–∞—Ç—å—Å—è —Å –±–ª–∏–∑–∫–∏–º–∏"
        ],
        "weights": [3, 2, 1]
    }
]

# –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = []
user_scores = []

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
animals = [
    ("–õ–µ–≤", "–¢—ã —Å–º–µ–ª—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ä–æ–ª—å —Å–∞–≤–∞–Ω–Ω—ã!", "https://moscowzoo.ru/animals/kinds/indiyskiy_lev"),
    ("–ß–µ—Ä–µ–ø–∞—Ö–∞", "–¢—ã —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –º—É–¥—Ä—ã–π, –∫–∞–∫ —á–µ—Ä–µ–ø–∞—Ö–∞!", "https://moscowzoo.ru/animals/kinds/luchistaya_cherepaha"),
    ("–û–±–µ–∑—å—è–Ω–∞", "–¢—ã –ª—é–±–æ–ø—ã—Ç–Ω—ã–π –∏ –∏–≥—Ä–∏–≤—ã–π, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –æ–±–µ–∑—å—è–Ω–∞!", "https://moscowzoo.ru/animals/kinds/boliviyskaya_mirikina")
]

# –∞–¥—Ä–µ—Å –∑–æ–æ–ø–∞—Ä–∫–∞
zoo_address = "–ú–æ—Å–∫–≤–∞, —É–ª. –ë–æ–ª—å—à–∞—è –ì—Ä—É–∑–∏–Ω—Å–∫–∞—è, 1"


def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–æ–æ–ø–∞—Ä–∫–∞!\n\n"
        "–£–∑–Ω–∞–π, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ–π–¥—è –Ω–∞—à—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –ü—Ä–æ—Å—Ç–æ follow the instructions on the screen.\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data='start_quiz')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(welcome_message, reply_markup=reply_markup)


def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_answers.clear()
    user_scores.clear()
    context.user_data['question_index'] = 0
    ask_question(update)


def ask_question(update: Update) -> None:
    question_index = update.effective_user.user_data['question_index']
    question = questions[question_index]['question']
    options = '\n'.join(f"{i + 1}. {option}" for i, option in enumerate(questions[question_index]['options']))
    update.message.reply_text(f"{question}\n{options}")


def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        question_index = context.user_data['question_index']

        if question_index < len(questions):
            answer_index = int(update.message.text.split('.')[0]) - 1
            user_scores.append(questions[question_index]['weights'][answer_index])

            context.user_data['question_index'] += 1
            if context.user_data['question_index'] < len(questions):
                ask_question(update)
            else:
                total_score = sum(user_scores)
                result(update, total_score)
    except Exception as e:
        logger.error(f"Error in answering question: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


def result(update: Update, total_score: int) -> None:
    animal_index = total_score % len(animals)
    animal = animals[animal_index]

    message = f"üéâ –¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äì **{animal[0]}**! üêæ\n{animal[1]}"
    update.message.reply_text(message)

    update.message.reply_photo(animal[2])  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ


    update.message.reply_text("üì≤ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö!")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–¥—Ä–µ—Å –∑–æ–æ–ø–∞—Ä–∫–∞
    keyboard = [
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–∞", callback_data='contact_info')],
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data='program_info')],
        [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", callback_data='restart_quiz')],
        [InlineKeyboardButton("–ê–¥—Ä–µ—Å –∑–æ–æ–ø–∞—Ä–∫–∞",
                              url="https://www.google.com/maps/search/?api=1&query=–ú–æ—Å–∫–≤–∞,+—É–ª.+–ë–æ–ª—å—à–∞—è+–ì—Ä—É–∑–∏–Ω—Å–∫–∞—è,+1")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=reply_markup)


def contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–æ–º–µ—Ä—É –∏–ª–∏ –ø–æ—á—Ç–µ:\n\n- üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (962) 971-38-75\n- ‚úâÔ∏è Email: zoofriends@moscowzoo.ru\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –Ω–∞—à–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:"
    total_score_str = ', '.join(map(str, user_scores))

    update.message.reply_text(message + f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {total_score_str}")


def program_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    update.message.reply_text(
        "ü¶Å **–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –Ω–∞–¥ –∂–∏–≤–æ—Ç–Ω—ã–º–∏**\n"
        "–°—Ç–∞–Ω—å –æ–ø–µ–∫—É–Ω–æ–º –∏ –ø–æ–º–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä –∂–∏–≤–æ—Ç–Ω—ã—Ö! –£—á–∞—Å—Ç–≤—É–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –∏ –ø–æ–ª—É—á–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n"
        "- –ë–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ª—é–±–∏–º—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏\n"
        "- –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –∞–∫—Ü–∏—è—Ö –∑–æ–æ–ø–∞—Ä–∫–∞\n"
        "- –ü–æ–ª—É—á–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏ –Ω–∞—à–∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π –∏ —Å–¥–µ–ª–∞–π –º–∏—Ä –ª—É—á—à–µ!"
    )


def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_feedback = update.message.text
    logger.info(f"Received feedback: {user_feedback}")
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")


def restart_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞!")
    quiz(update, context)


def main() -> None:
    application = ApplicationBuilder().token("7783435527:AAEUd1FC_ZWRrq72EiPePl_43mzw7iQIirE").build()

    # –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))

    application.run_polling()


if __name__ == '__main__':
    main()
